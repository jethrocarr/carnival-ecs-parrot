# ECS Parrot Serverless Configuration

service: ecs-parrot

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"


provider:
  name: aws
  runtime: python2.7

  # Stage & Region can be overriden at CLI.
  stage: ${file(serverless.env.yml):mysettings.stage}
  region: ${file(serverless.env.yml):mysettings.region}

  iamRoleStatements:
    # Allow description of ECS clusters
    - Effect: "Allow"
      Action:
        - "ecs:ListClusters"
        - "ecs:ListServices"
        - "ecs:DescribeServices"
        - "ecs:DescribeTasks"
        - "ecs:DescribeTaskDefinition"
        - "ecs:DescribeContainerInstances"
      Resource: "*"

  # Set environentals on the Lambda:
  environment:
    SLACK_WEBHOOKURL: ${file(serverless.env.yml):mysettings.slack.webhookurl}
    SLACK_USERNAME: ${file(serverless.env.yml):mysettings.slack.username}
    SLACK_CHANNEL: ${file(serverless.env.yml):mysettings.slack.channel}
    SLACK_ICON_EMOJI: ${file(serverless.env.yml):mysettings.slack.icon_emoji}
    SLACK_QUIET: ${file(serverless.env.yml):mysettings.slack.quiet}
    FLOWDOCK_API_TOKEN: ${file(serverless.env.yml):mysettings.flowdock.api_token}
    FLOWDOCK_USERNAME: ${file(serverless.env.yml):mysettings.flowdock.username}
    FLOWDOCK_ICON_EMOJI: ${file(serverless.env.yml):mysettings.flowdock.icon_emoji}
    FLOWDOCK_QUIET: ${file(serverless.env.yml):mysettings.flowdock.quiet}

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

# Define the application functions
functions:

  # Triggered by ECS CloudWatch events
  parrot:
    handler: handler.parrot
    memorySize: 128 # MB
    timeout: 15 # Seconds
